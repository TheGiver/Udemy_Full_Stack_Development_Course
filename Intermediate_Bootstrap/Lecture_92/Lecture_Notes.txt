Lecture Title: Code Refactoring
-------------------------------
Definition of Code Refactoring:
Code Refactoring is the process of reviewing and editing the code to improve 
the code quality, readability, modularity and other aspects of the program. 
-------------------------------
Why refactor your code?
You basically want to refactor your code in order to achieve the following:
(a) Make your code readable
(b) Make your code easy to maintain and review by you and others 
(c) Make your code easy to debug 
(d) Reduce code length and increase conciseness 
(e) Increase code efficiency although that it not that big of a concerns given our fast machine
    and the simplicity of the applications that we are building at this point. 
-------------------------------
Code refactoring priority list:
Below is a list (order: most-least importance) that specifies what aspects should we be 
focused on when refactoring our code:
(a) Readability:
    This is important as it will help when debugging the code and for other team members 
    to use the code you developed. 

    You tend to increase readability by reducing repetition, making the code more concise 
    and adding comments/documentation. 
(b) Modularity: 
    This refers to how easy it is to debug and reuse the code. 
(c) Efficiency:
    By reducing the amount of code we have, the compiler will be able to go through the files 
    a lot quicker which should make the program more efficient. Given the large amount of processing 
    power that we have, our programs should not be terribly affected by few extra lines. 
(d) Length:
    When reducing length your main aim has to be to improve readability. You can reduce the length of 
    your code but it is not advised to do if it makes it harder to understand the code. 